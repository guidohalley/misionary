import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import AuthService from '@/services/AuthService';
import type { LoginCredentials, RegisterCredentials, AuthState } from '@/@types/auth';
import appConfig from '@/configs/app.config';
import { REDIRECT_URL_KEY } from '@/constants/app.constant';

function useAuth() {
    const navigate = useNavigate();
    const [authState, setAuthState] = useState<AuthState>(AuthService.getAuthState());

    const signIn = async (credentials: LoginCredentials) => {
        try {
            const response = await AuthService.login(credentials);
            setAuthState({
                isAuthenticated: true,
                user: response.user,
                token: response.token
            });

            const redirectUrl = new URLSearchParams(window.location.search).get(REDIRECT_URL_KEY);
            navigate(redirectUrl || appConfig.authenticatedEntryPath);
            
            return { status: 'success' as const };
        } catch (error) {
            return {
                status: 'error' as const,
                message: (error as Error).message
            };
        }
    };

    const signOut = async () => {
        try {
            await AuthService.logout();
            setAuthState({
                isAuthenticated: false,
                user: null,
                token: null
            });
            navigate(appConfig.unAuthenticatedEntryPath);
            return { status: 'success' as const };
        } catch (error) {
            return {
                status: 'error' as const,
                message: (error as Error).message
            };
        }
    };

    return {
        authenticated: authState.isAuthenticated,
        user: authState.user,
        signIn,
        signOut
    };
}
          }
        | undefined
    > => {
        try {
            const resp = await apiSignIn(values)
            if (resp.data) {
                const { token } = resp.data
                dispatch(signInSuccess(token))
                if (resp.data.user) {
                    dispatch(
                        setUser(
                            resp.data.user || {
                                avatar: '',
                                userName: 'Anonymous',
                                authority: ['USER'],
                                email: '',
                            },
                        ),
                    )
                }
                const redirectUrl = query.get(REDIRECT_URL_KEY)
                navigate(
                    redirectUrl
                        ? redirectUrl
                        : appConfig.authenticatedEntryPath,
                )
                return {
                    status: 'success',
                    message: '',
                }
            }
            // eslint-disable-next-line  @typescript-eslint/no-explicit-any
        } catch (errors: any) {
            return {
                status: 'failed',
                message: errors?.response?.data?.message || errors.toString(),
            }
        }
    }

    const signUp = async (values: SignUpCredential) => {
        try {
            const resp = await apiSignUp(values)
            if (resp.data) {
                const { token } = resp.data
                dispatch(signInSuccess(token))
                if (resp.data.user) {
                    dispatch(
                        setUser(
                            resp.data.user || {
                                avatar: '',
                                userName: 'Anonymous',
                                authority: ['USER'],
                                email: '',
                            },
                        ),
                    )
                }
                const redirectUrl = query.get(REDIRECT_URL_KEY)
                navigate(
                    redirectUrl
                        ? redirectUrl
                        : appConfig.authenticatedEntryPath,
                )
                return {
                    status: 'success',
                    message: '',
                }
            }
            // eslint-disable-next-line  @typescript-eslint/no-explicit-any
        } catch (errors: any) {
            return {
                status: 'failed',
                message: errors?.response?.data?.message || errors.toString(),
            }
        }
    }

    const handleSignOut = () => {
        dispatch(signOutSuccess())
        dispatch(
            setUser({
                avatar: '',
                userName: '',
                email: '',
                authority: [],
            }),
        )
        navigate(appConfig.unAuthenticatedEntryPath)
    }

    const signOut = async () => {
        await apiSignOut()
        handleSignOut()
    }

    return {
        authenticated: token && signedIn,
        signIn,
        signUp,
        signOut,
    }
}

export default useAuth
