// This is your Prisma schema file.
// Learn more at https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ─────────────────── ENUMS ─────────────────── 

enum TipoPersona {
  CLIENTE
  PROVEEDOR
  INTERNO
}

enum RolUsuario {
  ADMIN
  CONTADOR
  PROVEEDOR
}

enum EstadoPresupuesto {
  BORRADOR
  ENVIADO
  APROBADO
  FACTURADO
}

enum EstadoFactura {
  EMITIDA
  PAGADA
  ANULADA
}

enum CodigoMoneda {
  ARS
  USD
  EUR
}

// Categorías de gastos operativos
enum CategoriaGasto {
  OFICINA          // Alquiler, servicios, limpieza
  PERSONAL         // Sueldos, cargas sociales, capacitación
  MARKETING        // Publicidad, eventos, contenido
  TECNOLOGIA       // Software, hardware, hosting
  SERVICIOS        // Contabilidad, legal, consultoría
  TRANSPORTE       // Combustible, mantenimiento, viajes
  COMUNICACION     // Internet, teléfono, reuniones
  OTROS            // Gastos diversos
}

// ─────────────────── MODELOS ─────────────────── 

// NUEVO: Sistema Multi-Moneda
model Moneda {
  id         Int            @id @default(autoincrement())
  codigo     CodigoMoneda   @unique
  nombre     String
  simbolo    String
  activo     Boolean        @default(true)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  // Relaciones
  tiposCambio      TipoCambio[]      @relation("MonedaOrigen")
  tiposCambioDestino TipoCambio[]    @relation("MonedaDestino")
  productos        Producto[]
  servicios        Servicio[]
  presupuestos     Presupuesto[]
  facturas         Factura[]
  gastosOperativos GastoOperativo[]  // Gastos operativos en esta moneda
}

model TipoCambio {
  id         Int          @id @default(autoincrement())
  monedaDesdeId Int
  monedaHaciaId Int
  monedaDesde   Moneda      @relation("MonedaOrigen", fields: [monedaDesdeId], references: [id])
  monedaHacia   Moneda      @relation("MonedaDestino", fields: [monedaHaciaId], references: [id])
  valor         Decimal     @db.Decimal(15,4) // 1200.5000
  fecha         DateTime    @db.Date
  createdAt     DateTime    @default(now())
  
  @@unique([monedaDesdeId, monedaHaciaId, fecha])
}

model Persona {
  id           Int            @id @default(autoincrement())
  nombre       String
  tipo         TipoPersona
  telefono     String?
  cvu          String?
  roles        RolUsuario[]
  password     String?        // Opcional - solo para usuarios del sistema
  email        String         @unique
  activo       Boolean        @default(true)
  esUsuario    Boolean        @default(false)  // Define si puede acceder al sistema
  productos    Producto[]
  servicios    Servicio[]
  presupuestos Presupuesto[]  @relation("ClientePresupuestos")
  recibos      Recibo[]
  gastosComoProveedor GastoOperativo[] @relation("GastoProveedor")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Producto {
  id          Int        @id @default(autoincrement())
  nombre      String
  precio      Decimal    @db.Decimal(15,2)  // Cambio de Float a Decimal para mayor precisión
  monedaId    Int        @default(1)        // 1 = ARS por defecto
  proveedorId Int
  proveedor   Persona    @relation(fields: [proveedorId], references: [id])
  moneda      Moneda     @relation(fields: [monedaId], references: [id])
  items       Item[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Servicio {
  id          Int        @id @default(autoincrement())
  nombre      String
  descripcion String
  precio      Decimal    @db.Decimal(15,2)  // Cambio de Float a Decimal para mayor precisión
  monedaId    Int        @default(1)        // 1 = ARS por defecto
  proveedorId Int
  proveedor   Persona    @relation(fields: [proveedorId], references: [id])
  moneda      Moneda     @relation(fields: [monedaId], references: [id])
  items       Item[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Presupuesto {
  id                   Int                     @id @default(autoincrement())
  clienteId            Int
  cliente              Persona                 @relation("ClientePresupuestos", fields: [clienteId], references: [id])
  items                Item[]
  subtotal             Decimal                 @db.Decimal(15,2)  // Cambio de Float a Decimal
  impuestos            Decimal                 @db.Decimal(15,2)  // Cambio de Float a Decimal
  total                Decimal                 @db.Decimal(15,2)  // Cambio de Float a Decimal
  monedaId             Int                     @default(1)        // 1 = ARS por defecto
  tipoCambioFecha      DateTime?               // Para recordar el tipo de cambio usado
  estado               EstadoPresupuesto       @default(BORRADOR)
  factura              Factura?
  presupuestoImpuestos PresupuestoImpuesto[]
  asignacionesGasto    AsignacionGastoProyecto[] // Gastos operativos asignados a este proyecto
  moneda               Moneda                  @relation(fields: [monedaId], references: [id])
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
}

model Item {
  id             Int         @id @default(autoincrement())
  presupuestoId  Int
  presupuesto    Presupuesto @relation(fields: [presupuestoId], references: [id])
  productoId     Int?
  producto       Producto?   @relation(fields: [productoId], references: [id])
  servicioId     Int?
  servicio       Servicio?   @relation(fields: [servicioId], references: [id])
  cantidad       Int
  precioUnitario Decimal     @db.Decimal(15,2)  // Cambio de Float a Decimal
}

model Factura {
  id                 Int            @id @default(autoincrement())
  numero             String         @unique
  presupuestoId      Int            @unique
  presupuesto        Presupuesto    @relation(fields: [presupuestoId], references: [id])
  fecha              DateTime
  subtotal           Decimal        @db.Decimal(15,2)  // Cambio de Float a Decimal
  impuestos          Decimal        @db.Decimal(15,2)  // Cambio de Float a Decimal
  total              Decimal        @db.Decimal(15,2)  // Cambio de Float a Decimal
  monedaId           Int            @default(1)        // 1 = ARS por defecto
  tipoCambioFecha    DateTime?      // Para recordar el tipo de cambio usado
  estado             EstadoFactura
  impuestoAplicadoId Int
  impuestoAplicado   Impuesto       @relation(fields: [impuestoAplicadoId], references: [id])
  moneda             Moneda         @relation(fields: [monedaId], references: [id])
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

model Recibo {
  id         Int       @id @default(autoincrement())
  personaId  Int
  persona    Persona   @relation(fields: [personaId], references: [id])
  concepto   String
  monto      Decimal   @db.Decimal(15,2)  // Cambio de Float a Decimal
  fecha      DateTime
  metodoPago String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Impuesto {
  id          Int                      @id @default(autoincrement())
  nombre      String                   @unique
  porcentaje  Decimal                  @db.Decimal(5,2)  // Cambio de Float a Decimal para porcentajes
  activo      Boolean                  @default(true)
  descripcion String?
  facturas    Factura[]
  presupuestoImpuestos PresupuestoImpuesto[]
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
}

model PresupuestoImpuesto {
  id            Int         @id @default(autoincrement())
  presupuestoId Int
  presupuesto   Presupuesto @relation(fields: [presupuestoId], references: [id])
  impuestoId    Int
  impuesto      Impuesto    @relation(fields: [impuestoId], references: [id])
  monto         Decimal     @db.Decimal(15,2)  // Cambio de Float a Decimal
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([presupuestoId, impuestoId])
}

// ─────────────────── GESTIÓN DE COSTOS OPERATIVOS ─────────────────── 

// Gastos operativos de la empresa
model GastoOperativo {
  id              Int                         @id @default(autoincrement())
  concepto        String                      // "Alquiler oficina", "Sueldo desarrollador", etc.
  descripcion     String?                     // Descripción detallada opcional
  monto           Decimal                     @db.Decimal(15,2)
  monedaId        Int
  fecha           DateTime                    // Fecha del gasto
  categoria       CategoriaGasto
  esRecurrente    Boolean                     @default(false) // Si es un gasto que se repite
  frecuencia      String?                     // "MENSUAL", "ANUAL", etc. (solo si esRecurrente = true)
  proveedorId     Int?                        // Proveedor del gasto (opcional)
  comprobante     String?                     // Número de factura/recibo
  observaciones   String?
  activo          Boolean                     @default(true)
  
  // Relaciones
  moneda          Moneda                      @relation(fields: [monedaId], references: [id])
  proveedor       Persona?                    @relation("GastoProveedor", fields: [proveedorId], references: [id])
  asignaciones    AsignacionGastoProyecto[]   // A qué proyectos se asigna este gasto
  
  createdAt       DateTime                    @default(now())
  updatedAt       DateTime                    @updatedAt
}

// Asignación de gastos operativos a proyectos específicos
model AsignacionGastoProyecto {
  id              Int                 @id @default(autoincrement())
  gastoId         Int
  presupuestoId   Int                 // Proyecto al que se asigna el gasto
  porcentaje      Decimal             @db.Decimal(5,2)  // Porcentaje del gasto asignado (ej: 25.50%)
  montoAsignado   Decimal             @db.Decimal(15,2) // Monto calculado automáticamente
  justificacion   String?             // Por qué se asigna este porcentaje a este proyecto
  
  // Relaciones
  gasto           GastoOperativo      @relation(fields: [gastoId], references: [id], onDelete: Cascade)
  presupuesto     Presupuesto         @relation(fields: [presupuestoId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  @@unique([gastoId, presupuestoId]) // Un gasto puede asignarse solo una vez por proyecto
}
