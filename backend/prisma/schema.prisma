generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Moneda {
  id                 Int               @id @default(autoincrement())
  codigo             CodigoMoneda      @unique
  nombre             String
  simbolo            String
  activo             Boolean           @default(true)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  cobrosCliente      CobroCliente[]
  facturas           Factura[]
  gastosOperativos   GastoOperativo[]
  historialPrecios   HistorialPrecio[] @relation("HistorialPrecioMoneda")
  pagosAdmin         PagoAdmin[]
  presupuestos       Presupuesto[]
  productos          Producto[]
  recibos            Recibo[]
  servicios          Servicio[]
  tiposCambio        TipoCambio[]      @relation("MonedaOrigen")
  tiposCambioDestino TipoCambio[]      @relation("MonedaDestino")
}

model CobroCliente {
  id            Int         @id @default(autoincrement())
  presupuestoId Int
  monto         Decimal     @db.Decimal(15, 2)
  monedaId      Int         @default(1)
  fecha         DateTime
  metodoPago    String
  concepto      String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  moneda        Moneda      @relation(fields: [monedaId], references: [id])
  presupuesto   Presupuesto @relation(fields: [presupuestoId], references: [id])

  @@index([presupuestoId])
  @@index([fecha])
}

model TipoCambio {
  id            Int            @id @default(autoincrement())
  monedaDesdeId Int
  monedaHaciaId Int
  valor         Decimal        @db.Decimal(15, 4)
  fecha         DateTime       @db.Date
  createdAt     DateTime       @default(now())
  fuente        String?
  tipo          TipoCotizacion @default(OFICIAL)
  monedaDesde   Moneda         @relation("MonedaOrigen", fields: [monedaDesdeId], references: [id])
  monedaHacia   Moneda         @relation("MonedaDestino", fields: [monedaHaciaId], references: [id])

  @@unique([monedaDesdeId, monedaHaciaId, tipo, fecha])
  @@index([fecha])
}

model Persona {
  id                      Int                  @id @default(autoincrement())
  nombre                  String
  tipo                    TipoPersona
  telefono                String?
  cvu                     String?
  roles                   RolUsuario[]
  providerRoles           String[]             @default([])
  providerArea            String?
  password                String?
  email                   String               @unique
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  activo                  Boolean              @default(true)
  esUsuario               Boolean              @default(false)
  empresas                Empresa[]            @relation("ClienteEmpresas")
  gastosComoProveedor     GastoOperativo[]     @relation("GastoProveedor")
  historialPreciosUsuario HistorialPrecio[]    @relation("HistorialPrecioUsuario")
  pagosAdmin              PagoAdmin[]
  presupuestos            Presupuesto[]        @relation("ClientePresupuestos")
  presupuestosVersiones   PresupuestoVersion[] @relation("PresupuestoVersionUsuario")
  productos               Producto[]
  recibos                 Recibo[]
  servicios               Servicio[]
  authTokens              AuthToken[]
}

model AuthToken {
  id         Int       @id @default(autoincrement())
  tipo       TokenTipo
  tokenHash  String    @unique
  email      String?
  personaId  Int?
  usado      Boolean   @default(false)
  expiresAt  DateTime
  createdAt  DateTime  @default(now())

  persona    Persona?  @relation(fields: [personaId], references: [id], onDelete: Cascade)

  @@index([personaId])
  @@index([expiresAt])
}

model Empresa {
  id           Int           @id @default(autoincrement())
  nombre       String
  razonSocial  String?
  cuit         String?       @unique
  telefono     String?
  email        String?
  direccion    String?
  clienteId    Int
  activo       Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  cliente      Persona       @relation("ClienteEmpresas", fields: [clienteId], references: [id], onDelete: Cascade)
  facturas     Factura[]     @relation("EmpresaFacturas")
  presupuestos Presupuesto[] @relation("EmpresaPresupuestos")

  @@index([clienteId])
  @@index([activo])
}

model Producto {
  id               Int               @id @default(autoincrement())
  nombre           String
  precio           Decimal           @db.Decimal(15, 2)
  proveedorId      Int
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  monedaId         Int               @default(1)
  costoProveedor   Decimal           @db.Decimal(15, 2)
  margenAgencia    Decimal           @db.Decimal(5, 2)
  historialPrecios HistorialPrecio[] @relation("ProductoHistorialPrecios")
  items            Item[]
  moneda           Moneda            @relation(fields: [monedaId], references: [id])
  proveedor        Persona           @relation(fields: [proveedorId], references: [id])
}

model Servicio {
  id               Int               @id @default(autoincrement())
  nombre           String
  descripcion      String
  precio           Decimal           @db.Decimal(15, 2)
  proveedorId      Int
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  monedaId         Int               @default(1)
  costoProveedor   Decimal           @db.Decimal(15, 2)
  margenAgencia    Decimal           @db.Decimal(5, 2)
  historialPrecios HistorialPrecio[] @relation("ServicioHistorialPrecios")
  items            Item[]
  moneda           Moneda            @relation(fields: [monedaId], references: [id])
  proveedor        Persona           @relation(fields: [proveedorId], references: [id])
}

model Presupuesto {
  id                   Int                       @id @default(autoincrement())
  clienteId            Int
  subtotal             Decimal                   @db.Decimal(15, 2)
  impuestos            Decimal                   @db.Decimal(15, 2)
  total                Decimal                   @db.Decimal(15, 2)
  estado               EstadoPresupuesto         @default(BORRADOR)
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  monedaId             Int                       @default(1)
  tipoCambioFecha      DateTime?
  empresaId            Int?
  esRecurrente         Boolean                   @default(false)
  frecuencia           FrecuenciaContrato?
  periodoFin           DateTime?
  periodoInicio        DateTime?
  precioPeriodo        Decimal?                  @db.Decimal(15, 2)
  renovacionAutomatica Boolean                   @default(false)
  margenAgenciaGlobal  Decimal?                  @db.Decimal(5, 2)
  montoGananciaAgencia Decimal?                  @db.Decimal(15, 2)
  usarGananciaGlobal   Boolean                   @default(false)
  asignacionesGasto    AsignacionGastoProyecto[]
  cobrosCliente        CobroCliente[]
  facturas             Factura[]
  items                Item[]
  pagosAdmin           PagoAdmin[]
  cliente              Persona                   @relation("ClientePresupuestos", fields: [clienteId], references: [id])
  empresa              Empresa?                  @relation("EmpresaPresupuestos", fields: [empresaId], references: [id])
  moneda               Moneda                    @relation(fields: [monedaId], references: [id])
  presupuestoImpuestos PresupuestoImpuesto[]
  versiones            PresupuestoVersion[]
  recibos              Recibo[]
}

model PresupuestoVersion {
  id                    Int                @id @default(autoincrement())
  presupuestoId         Int
  versionNumero         Int
  subtotalAnterior      Decimal?           @db.Decimal(15, 2)
  subtotalNuevo         Decimal            @db.Decimal(15, 2)
  impuestosAnterior     Decimal?           @db.Decimal(15, 2)
  impuestosNuevo        Decimal            @db.Decimal(15, 2)
  totalAnterior         Decimal?           @db.Decimal(15, 2)
  totalNuevo            Decimal            @db.Decimal(15, 2)
  estadoAnterior        EstadoPresupuesto?
  estadoNuevo           EstadoPresupuesto
  usuarioModificacionId Int?
  motivoCambio          String?
  fechaCambio           DateTime           @default(now())
  snapshotData          Json
  tipoOperacion         String             @default("UPDATE")
  presupuesto           Presupuesto        @relation(fields: [presupuestoId], references: [id], onDelete: Cascade)
  usuarioModificacion   Persona?           @relation("PresupuestoVersionUsuario", fields: [usuarioModificacionId], references: [id])

  @@unique([presupuestoId, versionNumero])
  @@index([presupuestoId])
  @@index([fechaCambio])
  @@index([usuarioModificacionId])
}

model Item {
  id             Int         @id @default(autoincrement())
  presupuestoId  Int
  productoId     Int?
  servicioId     Int?
  cantidad       Int
  precioUnitario Decimal     @db.Decimal(15, 2)
  presupuesto    Presupuesto @relation(fields: [presupuestoId], references: [id])
  producto       Producto?   @relation(fields: [productoId], references: [id])
  servicio       Servicio?   @relation(fields: [servicioId], references: [id])
}

model Factura {
  id                 Int           @id @default(autoincrement())
  numero             String        @unique
  presupuestoId      Int
  fecha              DateTime
  subtotal           Decimal       @db.Decimal(15, 2)
  impuestos          Decimal       @db.Decimal(15, 2)
  total              Decimal       @db.Decimal(15, 2)
  estado             EstadoFactura
  impuestoAplicadoId Int
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  monedaId           Int           @default(1)
  tipoCambioFecha    DateTime?
  empresaId          Int?
  empresa            Empresa?      @relation("EmpresaFacturas", fields: [empresaId], references: [id])
  impuestoAplicado   Impuesto      @relation(fields: [impuestoAplicadoId], references: [id])
  moneda             Moneda        @relation(fields: [monedaId], references: [id])
  presupuesto        Presupuesto   @relation(fields: [presupuestoId], references: [id])
}

model Recibo {
  id            Int          @id @default(autoincrement())
  personaId     Int
  concepto      String
  monto         Decimal      @db.Decimal(15, 2)
  fecha         DateTime
  metodoPago    String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  monedaId      Int          @default(1)
  presupuestoId Int?
  tipo          ReciboTipo   @default(PROVEEDOR)
  moneda        Moneda       @relation(fields: [monedaId], references: [id])
  persona       Persona      @relation(fields: [personaId], references: [id])
  presupuesto   Presupuesto? @relation(fields: [presupuestoId], references: [id])
}

model Impuesto {
  id                   Int                   @id @default(autoincrement())
  nombre               String                @unique
  porcentaje           Decimal               @db.Decimal(5, 2)
  activo               Boolean               @default(true)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  descripcion          String?
  facturas             Factura[]
  presupuestoImpuestos PresupuestoImpuesto[]
}

model PresupuestoImpuesto {
  id            Int         @id @default(autoincrement())
  presupuestoId Int
  impuestoId    Int
  monto         Decimal     @db.Decimal(15, 2)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  impuesto      Impuesto    @relation(fields: [impuestoId], references: [id])
  presupuesto   Presupuesto @relation(fields: [presupuestoId], references: [id])

  @@unique([presupuestoId, impuestoId])
}

model GastoOperativo {
  id            Int                       @id @default(autoincrement())
  concepto      String
  descripcion   String?
  monto         Decimal                   @db.Decimal(15, 2)
  monedaId      Int
  fecha         DateTime
  categoria     CategoriaGasto
  esRecurrente  Boolean                   @default(false)
  frecuencia    String?
  proveedorId   Int?
  comprobante   String?
  observaciones String?
  activo        Boolean                   @default(true)
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  tipoId        Int?
  asignaciones  AsignacionGastoProyecto[]
  moneda        Moneda                    @relation(fields: [monedaId], references: [id])
  proveedor     Persona?                  @relation("GastoProveedor", fields: [proveedorId], references: [id])
  TipoGasto     TipoGasto?                @relation(fields: [tipoId], references: [id])
}

model AsignacionGastoProyecto {
  id            Int            @id @default(autoincrement())
  gastoId       Int
  presupuestoId Int
  porcentaje    Decimal        @db.Decimal(5, 2)
  montoAsignado Decimal        @db.Decimal(15, 2)
  justificacion String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  gasto         GastoOperativo @relation(fields: [gastoId], references: [id], onDelete: Cascade)
  presupuesto   Presupuesto    @relation(fields: [presupuestoId], references: [id], onDelete: Cascade)

  @@unique([gastoId, presupuestoId])
}

model HistorialPrecio {
  id           Int       @id @default(autoincrement())
  productoId   Int?
  servicioId   Int?
  monedaId     Int
  precio       Decimal   @db.Decimal(15, 2)
  fechaDesde   DateTime
  fechaHasta   DateTime?
  motivoCambio String?
  usuarioId    Int?
  activo       Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  moneda       Moneda    @relation("HistorialPrecioMoneda", fields: [monedaId], references: [id])
  producto     Producto? @relation("ProductoHistorialPrecios", fields: [productoId], references: [id], onDelete: Cascade)
  servicio     Servicio? @relation("ServicioHistorialPrecios", fields: [servicioId], references: [id], onDelete: Cascade)
  usuario      Persona?  @relation("HistorialPrecioUsuario", fields: [usuarioId], references: [id])

  @@index([productoId, activo])
  @@index([servicioId, activo])
  @@index([fechaDesde])
}

model PagoAdmin {
  id            Int         @id @default(autoincrement())
  adminId       Int
  presupuestoId Int
  monto         Decimal     @db.Decimal(15, 2)
  monedaId      Int         @default(1)
  fecha         DateTime
  metodoPago    String
  concepto      String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  admin         Persona     @relation(fields: [adminId], references: [id])
  moneda        Moneda      @relation(fields: [monedaId], references: [id])
  presupuesto   Presupuesto @relation(fields: [presupuestoId], references: [id])

  @@index([presupuestoId])
}

model TipoGasto {
  id             Int              @id @default(autoincrement())
  nombre         String
  slug           String           @unique
  color          String?
  descripcion    String?
  activo         Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  GastoOperativo GastoOperativo[]
}

enum TipoPersona {
  CLIENTE
  PROVEEDOR
  INTERNO
}

enum RolUsuario {
  ADMIN
  CONTADOR
  PROVEEDOR
}

enum TokenTipo {
  INVITE
  RESET
}

enum EstadoPresupuesto {
  BORRADOR
  ENVIADO
  APROBADO
  FACTURADO
}

enum EstadoFactura {
  EMITIDA
  PAGADA
  ANULADA
}

enum CodigoMoneda {
  ARS
  USD
  EUR
}

enum TipoCotizacion {
  OFICIAL
  BLUE
  TARJETA
}

enum ReciboTipo {
  PROVEEDOR
  ADMIN
}

enum FrecuenciaContrato {
  UNICO
  MENSUAL
  TRIMESTRAL
  ANUAL
}

enum CategoriaGasto {
  OFICINA
  PERSONAL
  MARKETING
  TECNOLOGIA
  SERVICIOS
  TRANSPORTE
  COMUNICACION
  OTROS
}
