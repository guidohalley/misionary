
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.MonedaScalarFieldEnum = {
  id: 'id',
  codigo: 'codigo',
  nombre: 'nombre',
  simbolo: 'simbolo',
  activo: 'activo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CobroClienteScalarFieldEnum = {
  id: 'id',
  presupuestoId: 'presupuestoId',
  monto: 'monto',
  monedaId: 'monedaId',
  fecha: 'fecha',
  metodoPago: 'metodoPago',
  concepto: 'concepto',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TipoCambioScalarFieldEnum = {
  id: 'id',
  monedaDesdeId: 'monedaDesdeId',
  monedaHaciaId: 'monedaHaciaId',
  valor: 'valor',
  fecha: 'fecha',
  createdAt: 'createdAt',
  fuente: 'fuente',
  tipo: 'tipo'
};

exports.Prisma.PersonaScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  tipo: 'tipo',
  telefono: 'telefono',
  cvu: 'cvu',
  roles: 'roles',
  password: 'password',
  email: 'email',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  activo: 'activo',
  esUsuario: 'esUsuario'
};

exports.Prisma.EmpresaScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  razonSocial: 'razonSocial',
  cuit: 'cuit',
  telefono: 'telefono',
  email: 'email',
  direccion: 'direccion',
  clienteId: 'clienteId',
  activo: 'activo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductoScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  precio: 'precio',
  proveedorId: 'proveedorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  monedaId: 'monedaId',
  costoProveedor: 'costoProveedor',
  margenAgencia: 'margenAgencia'
};

exports.Prisma.ServicioScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  descripcion: 'descripcion',
  precio: 'precio',
  proveedorId: 'proveedorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  monedaId: 'monedaId',
  costoProveedor: 'costoProveedor',
  margenAgencia: 'margenAgencia'
};

exports.Prisma.PresupuestoScalarFieldEnum = {
  id: 'id',
  clienteId: 'clienteId',
  subtotal: 'subtotal',
  impuestos: 'impuestos',
  total: 'total',
  estado: 'estado',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  monedaId: 'monedaId',
  tipoCambioFecha: 'tipoCambioFecha',
  empresaId: 'empresaId',
  esRecurrente: 'esRecurrente',
  frecuencia: 'frecuencia',
  periodoFin: 'periodoFin',
  periodoInicio: 'periodoInicio',
  precioPeriodo: 'precioPeriodo',
  renovacionAutomatica: 'renovacionAutomatica'
};

exports.Prisma.PresupuestoVersionScalarFieldEnum = {
  id: 'id',
  presupuestoId: 'presupuestoId',
  versionNumero: 'versionNumero',
  subtotalAnterior: 'subtotalAnterior',
  subtotalNuevo: 'subtotalNuevo',
  impuestosAnterior: 'impuestosAnterior',
  impuestosNuevo: 'impuestosNuevo',
  totalAnterior: 'totalAnterior',
  totalNuevo: 'totalNuevo',
  estadoAnterior: 'estadoAnterior',
  estadoNuevo: 'estadoNuevo',
  usuarioModificacionId: 'usuarioModificacionId',
  motivoCambio: 'motivoCambio',
  fechaCambio: 'fechaCambio',
  snapshotData: 'snapshotData',
  tipoOperacion: 'tipoOperacion'
};

exports.Prisma.ItemScalarFieldEnum = {
  id: 'id',
  presupuestoId: 'presupuestoId',
  productoId: 'productoId',
  servicioId: 'servicioId',
  cantidad: 'cantidad',
  precioUnitario: 'precioUnitario'
};

exports.Prisma.FacturaScalarFieldEnum = {
  id: 'id',
  numero: 'numero',
  presupuestoId: 'presupuestoId',
  fecha: 'fecha',
  subtotal: 'subtotal',
  impuestos: 'impuestos',
  total: 'total',
  estado: 'estado',
  impuestoAplicadoId: 'impuestoAplicadoId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  monedaId: 'monedaId',
  tipoCambioFecha: 'tipoCambioFecha',
  empresaId: 'empresaId'
};

exports.Prisma.ReciboScalarFieldEnum = {
  id: 'id',
  personaId: 'personaId',
  concepto: 'concepto',
  monto: 'monto',
  fecha: 'fecha',
  metodoPago: 'metodoPago',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  monedaId: 'monedaId',
  presupuestoId: 'presupuestoId',
  tipo: 'tipo'
};

exports.Prisma.ImpuestoScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  porcentaje: 'porcentaje',
  activo: 'activo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  descripcion: 'descripcion'
};

exports.Prisma.PresupuestoImpuestoScalarFieldEnum = {
  id: 'id',
  presupuestoId: 'presupuestoId',
  impuestoId: 'impuestoId',
  monto: 'monto',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GastoOperativoScalarFieldEnum = {
  id: 'id',
  concepto: 'concepto',
  descripcion: 'descripcion',
  monto: 'monto',
  monedaId: 'monedaId',
  fecha: 'fecha',
  categoria: 'categoria',
  esRecurrente: 'esRecurrente',
  frecuencia: 'frecuencia',
  proveedorId: 'proveedorId',
  comprobante: 'comprobante',
  observaciones: 'observaciones',
  activo: 'activo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tipoId: 'tipoId'
};

exports.Prisma.AsignacionGastoProyectoScalarFieldEnum = {
  id: 'id',
  gastoId: 'gastoId',
  presupuestoId: 'presupuestoId',
  porcentaje: 'porcentaje',
  montoAsignado: 'montoAsignado',
  justificacion: 'justificacion',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HistorialPrecioScalarFieldEnum = {
  id: 'id',
  productoId: 'productoId',
  servicioId: 'servicioId',
  monedaId: 'monedaId',
  precio: 'precio',
  fechaDesde: 'fechaDesde',
  fechaHasta: 'fechaHasta',
  motivoCambio: 'motivoCambio',
  usuarioId: 'usuarioId',
  activo: 'activo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PagoAdminScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  presupuestoId: 'presupuestoId',
  monto: 'monto',
  monedaId: 'monedaId',
  fecha: 'fecha',
  metodoPago: 'metodoPago',
  concepto: 'concepto',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TipoGastoScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  slug: 'slug',
  color: 'color',
  descripcion: 'descripcion',
  activo: 'activo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.CodigoMoneda = exports.$Enums.CodigoMoneda = {
  ARS: 'ARS',
  USD: 'USD',
  EUR: 'EUR'
};

exports.TipoCotizacion = exports.$Enums.TipoCotizacion = {
  OFICIAL: 'OFICIAL',
  BLUE: 'BLUE',
  TARJETA: 'TARJETA'
};

exports.TipoPersona = exports.$Enums.TipoPersona = {
  CLIENTE: 'CLIENTE',
  PROVEEDOR: 'PROVEEDOR',
  INTERNO: 'INTERNO'
};

exports.RolUsuario = exports.$Enums.RolUsuario = {
  ADMIN: 'ADMIN',
  CONTADOR: 'CONTADOR',
  PROVEEDOR: 'PROVEEDOR'
};

exports.EstadoPresupuesto = exports.$Enums.EstadoPresupuesto = {
  BORRADOR: 'BORRADOR',
  ENVIADO: 'ENVIADO',
  APROBADO: 'APROBADO',
  FACTURADO: 'FACTURADO'
};

exports.FrecuenciaContrato = exports.$Enums.FrecuenciaContrato = {
  UNICO: 'UNICO',
  MENSUAL: 'MENSUAL',
  TRIMESTRAL: 'TRIMESTRAL',
  ANUAL: 'ANUAL'
};

exports.EstadoFactura = exports.$Enums.EstadoFactura = {
  EMITIDA: 'EMITIDA',
  PAGADA: 'PAGADA',
  ANULADA: 'ANULADA'
};

exports.ReciboTipo = exports.$Enums.ReciboTipo = {
  PROVEEDOR: 'PROVEEDOR',
  ADMIN: 'ADMIN'
};

exports.CategoriaGasto = exports.$Enums.CategoriaGasto = {
  OFICINA: 'OFICINA',
  PERSONAL: 'PERSONAL',
  MARKETING: 'MARKETING',
  TECNOLOGIA: 'TECNOLOGIA',
  SERVICIOS: 'SERVICIOS',
  TRANSPORTE: 'TRANSPORTE',
  COMUNICACION: 'COMUNICACION',
  OTROS: 'OTROS'
};

exports.Prisma.ModelName = {
  Moneda: 'Moneda',
  CobroCliente: 'CobroCliente',
  TipoCambio: 'TipoCambio',
  Persona: 'Persona',
  Empresa: 'Empresa',
  Producto: 'Producto',
  Servicio: 'Servicio',
  Presupuesto: 'Presupuesto',
  PresupuestoVersion: 'PresupuestoVersion',
  Item: 'Item',
  Factura: 'Factura',
  Recibo: 'Recibo',
  Impuesto: 'Impuesto',
  PresupuestoImpuesto: 'PresupuestoImpuesto',
  GastoOperativo: 'GastoOperativo',
  AsignacionGastoProyecto: 'AsignacionGastoProyecto',
  HistorialPrecio: 'HistorialPrecio',
  PagoAdmin: 'PagoAdmin',
  TipoGasto: 'TipoGasto'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
