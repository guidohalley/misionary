# Instrucciones para Agentes de IA - Proyecto ERP Misionary

## ‚úÖ **ESTADO ACTUAL: AUTENTICACI√ìN COMPLETAMENTE FUNCIONAL**

### üéâ **LOGIN Y NAVEGACI√ìN FUNCIONANDO CORRECTAMENTE**
- ‚úÖ Sistema de login completamente operativo
- ‚úÖ Usuario autenticado redirigido autom√°ticamente al layout principal
- ‚úÖ Layout Elstar completo visible (header, sidebar, navegaci√≥n)
- ‚úÖ Rutas protegidas y p√∫blicas configuradas correctamente
- ‚úÖ Sincronizaci√≥n AuthService ‚Üî Redux ‚Üî localStorage
- ‚úÖ Sesiones persistentes entre recargas del navegador

### üîë **CREDENCIALES DE PRUEBA:**
- Email: admin@misionary.com
- Password: admin123

### üöÄ **PR√ìXIMOS PASOS - DESARROLLO INCREMENTAL:**

**üî• NUEVA ESTRATEGIA DE PRIORIDADES PARA AGENCIA DE MARKETING:**

**ENFOQUE MULTI-MONEDA COMO BASE FUNDAMENTAL**

En el contexto econ√≥mico argentino, donde coexisten m√∫ltiples monedas (Pesos, USD, EUR) y existe alta volatilidad, es fundamental establecer un sistema multi-moneda como base antes de implementar cualquier otra funcionalidad avanzada.

**PRIORIDAD 1: GESTI√ìN MULTI-MONEDA (BASE FUNDAMENTAL)**
- Sistema de m√∫ltiples monedas (ARS, USD, EUR)
- Tabla de tipos de cambio hist√≥ricos
- Conversi√≥n autom√°tica entre monedas
- Reportes financieros consolidados
- Presupuestos y facturas en moneda espec√≠fica
- **JUSTIFICACI√ìN**: Base fundamental que permite an√°lisis financiero real, especialmente cr√≠tico en Argentina donde muchos servicios se cotizan en USD pero se pagan en pesos

**PRIORIDAD 2: COSTOS OPERATIVOS Y AN√ÅLISIS DE RENTABILIDAD**
- Registro de gastos operativos por categor√≠a
- Asignaci√≥n de costos a proyectos/clientes
- C√°lculo autom√°tico de m√°rgenes reales
- Dashboard de rentabilidad por cliente/proyecto
- Integraci√≥n con sistema multi-moneda
- **JUSTIFICACI√ìN**: Permite conocer la rentabilidad real considerando todos los costos, fundamental para tomar decisiones comerciales correctas

**PRIORIDAD 3: PRECIOS DIN√ÅMICOS CON MULTI-MONEDA**
- Historial de precios por moneda
- Actualizaci√≥n masiva por inflaci√≥n/devaluaci√≥n
- Versionado de presupuestos al cambiar tipos de cambio
- Alertas de precios desactualizados por volatilidad
- **JUSTIFICACI√ìN**: Una vez establecida la base multi-moneda, los precios din√°micos se vuelven mucho m√°s √∫tiles y precisos

**PRIORIDAD 4: CONTRATOS RECURRENTES MULTI-MONEDA**
- Contratos en moneda espec√≠fica con cl√°usulas de ajuste
- Renovaci√≥n con actualizaci√≥n de tipos de cambio
- Proyecci√≥n de ingresos en moneda base
- Alertas de renovaci√≥n y reajuste
- **JUSTIFICACI√ìN**: Los contratos son m√°s predecibles cuando est√°n en una base monetaria s√≥lida

**PRIORIDAD 5: SERVICIOS COMPUESTOS CON COSTOS REALES**
- Paquetes con costos detallados por componente
- M√°rgenes calculados sobre costos reales
- Asignaci√≥n de proveedores con sus respectivos costos
- **JUSTIFICACI√ìN**: M√°s efectivo cuando se conocen los costos reales de cada componente

**PRIORIDAD 6: SEGUIMIENTO DE PAGOS MULTI-MONEDA**
- Pagos en diferentes monedas
- Conversi√≥n autom√°tica al tipo de cambio del d√≠a
- Seguimiento de diferencias de cambio
- **JUSTIFICACI√ìN**: Completar el ciclo financiero con la precisi√≥n multi-moneda

**PRIORIDAD 7: DASHBOARD GERENCIAL INTEGRAL**
- M√©tricas en moneda base con conversiones
- An√°lisis de rentabilidad real por moneda
- Proyecciones considerando costos operativos
- **JUSTIFICACI√ìN**: Dashboard realmente √∫til solo cuando tiene datos financieros precisos y completos

---

## Informaci√≥n General del Proyecto
- **Nombre**: Misionary ERP
- **Tipo**: Sistema ERP completo para empresa en crecimiento (10-100 empleados)
- **Stack**: Docker + Node.js/Express/Prisma/PostgreSQL (Backend) + React/Vite/Tailwind (Frontend)
- **Template Frontend**: Elstar React Template (https://elstar.themenate.net/app)

## Arquitectura del Proyecto

### Estructura de Directorios
```
misionary/
‚îú‚îÄ‚îÄ docker-compose.yml          # Orquestaci√≥n de contenedores
‚îú‚îÄ‚îÄ .env                       # Variables de entorno principales
‚îú‚îÄ‚îÄ backend/                   # API Node.js/Express
‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile            # Configuraci√≥n Docker backend
‚îÇ   ‚îú‚îÄ‚îÄ package.json          # Dependencias Node.js
‚îÇ   ‚îú‚îÄ‚îÄ .env                  # Variables de entorno backend
‚îÇ   ‚îú‚îÄ‚îÄ prisma/               # ORM y base de datos
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ schema.prisma     # Esquema de base de datos
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ seed.ts          # Datos iniciales
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ migrations/       # Migraciones de BD
‚îÇ   ‚îî‚îÄ‚îÄ src/                  # C√≥digo fuente
‚îÇ       ‚îú‚îÄ‚îÄ index.ts          # Punto de entrada
‚îÇ       ‚îú‚îÄ‚îÄ config/           # Configuraciones
‚îÇ       ‚îú‚îÄ‚îÄ controllers/      # Controladores API
‚îÇ       ‚îú‚îÄ‚îÄ services/         # L√≥gica de negocio
‚îÇ       ‚îú‚îÄ‚îÄ middleware/       # Middlewares
‚îÇ       ‚îî‚îÄ‚îÄ routes/           # Rutas API
‚îî‚îÄ‚îÄ frontend/                 # App React con Elstar Template
    ‚îú‚îÄ‚îÄ Dockerfile           # Configuraci√≥n Docker frontend
    ‚îú‚îÄ‚îÄ package.json         # Dependencias React
    ‚îî‚îÄ‚îÄ src/                 # C√≥digo fuente React
```

## Configuraci√≥n del Entorno

### Variables de Entorno Principales (.env ra√≠z)
```
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
POSTGRES_DB=misionary
NODE_ENV=development
JWT_SECRET=your_super_secret_jwt_key_for_production
JWT_EXPIRES_IN=1d
VITE_API_URL=http://localhost:3001/api
CORS_ORIGIN=http://localhost:3000
```

### Puertos de Servicios
- **Frontend**: Puerto 3000 (http://localhost:3000) - Vite dev server
- **Backend API**: Puerto 3001 (http://localhost:3001/api)
- **PostgreSQL**: Puerto 5432 (localhost:5432)

## Comandos Esenciales

### Inicio Completo del Entorno
```bash
cd misionary/
docker-compose up -d
```

### Verificar Estado de Contenedores
```bash
docker ps -a
```

### Ver Logs de Servicios
```bash
docker logs misionary-backend-1
docker logs misionary-frontend-1
docker logs misionary-postgres-1
```

### Ejecutar Migraciones y Seed
```bash
# Desde el contenedor backend
docker exec misionary-backend-1 npm run db:migrate
docker exec misionary-backend-1 npm run db:seed
```

### Reconstruir Contenedores (cuando hay cambios)
```bash
docker-compose down
docker-compose build --no-cache
docker-compose up -d
```

## Dependencias Clave

### Backend (Node.js)
- **ORM**: Prisma 6.9.0
- **Framework**: Express 5.1.0
- **Auth**: bcrypt + jsonwebtoken
- **Validaci√≥n**: express-validator
- **Seguridad**: helmet, cors
- **Dev**: TypeScript, ts-node-dev (hot reload)

### Frontend (React)
- **Template**: Elstar React Template (comercial)
- **Build**: Vite
- **Styling**: Tailwind CSS
- **State**: Zustand/Redux (verificar template)
- **Routing**: React Router

## Configuraci√≥n Especial del Template Elstar

### Caracter√≠sticas del Template
- Dashboard administrativo completo
- Componentes UI preconstruidos
- Tema dark/light
- Responsive design
- M√∫ltiples layouts
- Componentes de tablas, formularios, gr√°ficos

### Integraci√≥n con el ERP
- **Autenticaci√≥n**: Adaptar el sistema de auth del template con nuestro JWT
- **Rutas**: Configurar rutas seg√∫n roles (ADMIN, CONTADOR, PROVEEDOR)
- **API Integration**: Conectar componentes con nuestros endpoints
- **Temas**: Personalizar colores/branding para Misionary

## Estructura de la Base de Datos (Prisma Schema)

### Entidades Principales
1. **Persona**: Clientes, Proveedores, Internos
2. **Producto/Servicio**: Items para presupuestos
3. **Presupuesto**: Estados BORRADOR ‚Üí ENVIADO ‚Üí APROBADO ‚Üí FACTURADO
4. **Factura**: Estados EMITIDA / PAGADA / ANULADA
5. **Recibo**: Vinculado a facturas pagadas

### Usuario Admin por Defecto
- **Email**: admin@misionary.com
- **Password**: admin123
- **Rol**: ADMIN

## Estrategia de Desarrollo - IMPORTANTE

### ‚ö†Ô∏è REGLA DE ORO: UN M√ìDULO A LA VEZ
- **NUNCA** intentar implementar m√∫ltiples CRUDs simult√°neamente
- **SIEMPRE** completar un m√≥dulo antes de pasar al siguiente
- **ENFOQUE**: Configuraci√≥n ‚Üí Autenticaci√≥n ‚Üí Un CRUD ‚Üí Siguiente CRUD

### Estado Actual del Proyecto
‚úÖ **COMPLETADO:**
- Docker environment funcionando
- Backend API operativo (puerto 3001)
- PostgreSQL con migraciones aplicadas
- Autenticaci√≥n JWT funcional
- Usuario admin creado: admin@misionary.com / admin123
- Frontend Elstar funcionando (puerto 3000) - CON HOT RELOAD
- Configuraci√≥n de puertos corregida (3000:5173)
- Error de autoprefixer corregido
- Configuraci√≥n PostCSS/Tailwind corregida (@tailwindcss/postcss)
- Error de locale/idioma corregido (espa√±ol agregado)
- Configuraci√≥n de rutas corregida (component vs element)
- Conexi√≥n frontend-backend establecida (login funcional)
- Sincronizaci√≥n autenticaci√≥n con Redux store del template
- Configuraci√≥n de rutas de autenticaci√≥n (/home)
- Frontend completamente funcional CON LAYOUT

‚ùå **PENDIENTE (NO TOCAR HASTA COMPLETAR ANTERIOR):**
- CRUD Personas
- CRUD Productos
- CRUD Presupuestos
- Dashboard

## Patrones de Desarrollo

### API Endpoints
```
/api/auth/login    (POST) - Autenticaci√≥n
/api/auth/register (POST) - Registro
/api/personas/*    (CRUD) - Gesti√≥n personas
/api/productos/*   (CRUD) - Gesti√≥n productos
/api/presupuestos/* (CRUD) - Gesti√≥n presupuestos
/api/facturas/*    (CRUD) - Gesti√≥n facturas
```

### Estructura de Controllers
- Usar clases est√°ticas con m√©todos async
- Manejo de errores con try/catch
- Validaci√≥n con express-validator
- Respuestas JSON consistentes

### Middleware de Autenticaci√≥n
- JWT en header Authorization: Bearer <token>
- Middleware `auth` para proteger rutas
- Middleware `checkRole` para autorizaci√≥n por rol

## Troubleshooting Com√∫n

### Problemas de Contenedores
```bash
# Limpiar contenedores y vol√∫menes
docker-compose down -v
docker system prune -f

# Reconstruir desde cero
docker-compose build --no-cache
```

### Problemas de Base de Datos
```bash
# Reset completo de BD
docker-compose down -v
docker-compose up -d postgres
# Esperar que est√© healthy, luego:
docker exec misionary-backend-1 npx prisma migrate deploy
docker exec misionary-backend-1 npx prisma db seed
```

### Problemas de TypeScript
- Verificar que @types/* est√©n instalados
- Generar cliente Prisma: `npx prisma generate`
- Verificar imports (usar `bcrypt` no `bcryptjs`)

## Integraciones Futuras (No MVP)
- AFIP SDK para facturaci√≥n electr√≥nica
- Microservicio de emails
- Sistema de inventario
- Integraciones bancarias

## Notas Importantes para Agentes IA
1. **NUNCA** cambiar configuraciones de Docker sin consultar
2. **SIEMPRE** usar `bcrypt` en lugar de `bcryptjs`
3. **VERIFICAR** que el template Elstar est√© correctamente configurado
4. **RESPETAR** la estructura de roles y permisos establecida
5. **USAR** los endpoints existentes antes de crear nuevos
6. **DOCUMENTAR** cualquier cambio importante en este archivo

## Contacto y Referencias
- Template Elstar: https://elstar.themenate.net/app
- Documentaci√≥n Prisma: https://www.prisma.io/docs
- Documentaci√≥n Express: https://expressjs.com/
- Documentaci√≥n Docker Compose: https://docs.docker.com/compose/

---

## ‚úÖ **ESTADO ACTUAL COMPLETADO (Enero 2025)**

### üéØ **AUTENTICACI√ìN Y NAVEGACI√ìN - 100% FUNCIONAL**

#### Backend API:
- ‚úÖ Servidor Express corriendo en puerto 3001
- ‚úÖ PostgreSQL 16 con datos de prueba
- ‚úÖ Endpoint `/api/auth/login` funcionando correctamente
- ‚úÖ JWT tokens generados y validados
- ‚úÖ Usuario admin creado: admin@misionary.com / admin123

#### Frontend React:
- ‚úÖ Aplicaci√≥n corriendo en puerto 3000
- ‚úÖ Template Elstar completamente integrado
- ‚úÖ Sistema de rutas protegidas/p√∫blicas
- ‚úÖ Hook useAuth sincronizado con Redux
- ‚úÖ AuthService manejando localStorage
- ‚úÖ Login funcional con redirecci√≥n autom√°tica
- ‚úÖ Layout principal visible post-autenticaci√≥n

#### Flujo de Autenticaci√≥n:
1. Usuario accede a `/login`
2. Ingresa credenciales (admin@misionary.com / admin123)
3. AuthService env√≠a POST `/api/auth/login`
4. Backend responde con { user, token }
5. Frontend almacena en localStorage + Redux
6. Usuario es redirigido a `/home` (layout principal)
7. Layout Elstar se muestra con header, sidebar, navegaci√≥n

### üöÄ **PR√ìXIMA FASE: DESARROLLO INCREMENTAL DE CRUDS**

#### **‚úÖ FASE COMPLETADA: CRUD PERSONAS - IMPLEMENTACI√ìN EXITOSA CON FORMULARIOS ESPEC√çFICOS**

**üéâ ESTADO: 100% FUNCIONAL - CREAR, LISTAR, EDITAR, ELIMINAR + FORMULARIOS ESPEC√çFICOS**

**üî• NUEVA FUNCIONALIDAD: FORMULARIOS ESPEC√çFICOS POR TIPO DE PERSONA**

**SEPARACI√ìN COMPLETA DE L√ìGICA DE NEGOCIO:**

```
Tipos de Persona y sus Caracter√≠sticas:

1. üìã CLIENTES:
   - Solo informaci√≥n de contacto (nombre, email, tel√©fono, CVU)
   - NO tienen acceso al sistema (esUsuario: false)
   - NO tienen contrase√±a
   - NO tienen roles de usuario
   - Para gesti√≥n de presupuestos y facturas √∫nicamente

2. üè¢ PROVEEDORES:
   - Informaci√≥n de contacto + credenciales de acceso
   - S√ç tienen acceso al sistema (esUsuario: true)
   - S√ç tienen contrase√±a (hasheda en backend)
   - Rol fijo: PROVEEDOR
   - Pueden gestionar sus productos/servicios

3. üë• USUARIOS INTERNOS:
   - Informaci√≥n de contacto + credenciales de acceso
   - S√ç tienen acceso al sistema (esUsuario: true)
   - S√ç tienen contrase√±a (hasheda en backend)
   - Roles administrativos: ADMIN y/o CONTADOR
   - Acceso completo seg√∫n roles asignados
```

**ARQUITECTURA DE FORMULARIOS IMPLEMENTADA:**

```
views/personas/
‚îú‚îÄ‚îÄ schemas.ts                           # ‚úÖ SEPARACI√ìN DE SCHEMAS
‚îÇ   ‚îú‚îÄ‚îÄ clienteSchema                   # Solo datos b√°sicos
‚îÇ   ‚îú‚îÄ‚îÄ proveedorSchema                 # Datos + contrase√±a + rol PROVEEDOR
‚îÇ   ‚îî‚îÄ‚îÄ internoSchema                   # Datos + contrase√±a + roles ADMIN/CONTADOR
‚îÇ
‚îú‚îÄ‚îÄ ClienteForm/                        # ‚úÖ FORMULARIO ESPEC√çFICO CLIENTES
‚îÇ   ‚îú‚îÄ‚îÄ ClienteForm.tsx                 # Solo campos b√°sicos, sin contrase√±a
‚îÇ   ‚îî‚îÄ‚îÄ index.ts
‚îÇ
‚îú‚îÄ‚îÄ ProveedorForm/                      # ‚úÖ FORMULARIO ESPEC√çFICO PROVEEDORES
‚îÇ   ‚îú‚îÄ‚îÄ ProveedorForm.tsx               # Campos b√°sicos + contrase√±a + rol autom√°tico
‚îÇ   ‚îî‚îÄ‚îÄ index.ts
‚îÇ
‚îú‚îÄ‚îÄ InternoForm/                        # ‚úÖ FORMULARIO ESPEC√çFICO INTERNOS
‚îÇ   ‚îú‚îÄ‚îÄ InternoForm.tsx                 # Campos b√°sicos + contrase√±a + selecci√≥n roles
‚îÇ   ‚îî‚îÄ‚îÄ index.ts
‚îÇ
‚îú‚îÄ‚îÄ ClienteNew/                         # ‚úÖ P√ÅGINA CREAR CLIENTE
‚îÇ   ‚îú‚îÄ‚îÄ ClienteNew.tsx                  # Usa ClienteForm
‚îÇ   ‚îî‚îÄ‚îÄ index.ts
‚îÇ
‚îú‚îÄ‚îÄ ProveedorNew/                       # ‚úÖ P√ÅGINA CREAR PROVEEDOR
‚îÇ   ‚îú‚îÄ‚îÄ ProveedorNew.tsx                # Usa ProveedorForm
‚îÇ   ‚îî‚îÄ‚îÄ index.ts
‚îÇ
‚îú‚îÄ‚îÄ InternoNew/                         # ‚úÖ P√ÅGINA CREAR USUARIO INTERNO
‚îÇ   ‚îú‚îÄ‚îÄ InternoNew.tsx                  # Usa InternoForm
‚îÇ   ‚îî‚îÄ‚îÄ index.ts
‚îÇ
‚îî‚îÄ‚îÄ PersonaTypeSelector/                # ‚úÖ SELECTOR DE TIPO
    ‚îú‚îÄ‚îÄ PersonaTypeSelector.tsx         # P√°gina de selecci√≥n elegante
    ‚îî‚îÄ‚îÄ index.ts
```

**BACKEND LOGIC AUTOM√ÅTICA IMPLEMENTADA:**

```typescript
// backend/src/controllers/persona.controller.ts

switch (tipo) {
  case 'CLIENTE':
    newPersona.esUsuario = false;     // No acceso al sistema
    newPersona.roles = [];            // Sin roles
    // password ignorado
    break;
    
  case 'PROVEEDOR':
    newPersona.esUsuario = true;      // Con acceso al sistema
    newPersona.roles = ['PROVEEDOR']; // Rol fijo
    newPersona.password = await bcrypt.hash(password, 10); // Hash password
    break;
    
  case 'INTERNO':
    newPersona.esUsuario = true;      // Con acceso al sistema
    newPersona.roles = roles;         // Roles seleccionados (ADMIN/CONTADOR)
    newPersona.password = await bcrypt.hash(password, 10); // Hash password
    break;
}
```

**RUTAS CONFIGURADAS:**

```typescript
// configs/routes.config.tsx
{
  key: 'persona-type-selector',
  path: '/personas/new',           // Selector de tipo
  component: PersonaTypeSelector,
},
{
  key: 'cliente-new',
  path: '/personas/cliente/new',   // Crear cliente espec√≠fico
  component: ClienteNew,
},
{
  key: 'proveedor-new',
  path: '/personas/proveedor/new', // Crear proveedor espec√≠fico
  component: ProveedorNew,
},
{
  key: 'interno-new',
  path: '/personas/interno/new',   // Crear usuario interno espec√≠fico
  component: InternoNew,
},
```

**NAVEGACI√ìN MEJORADA:**

```typescript
// configs/navigation.config/index.ts
subMenu: [
  {
    key: 'gestion.clientes',
    path: '/personas?tipo=CLIENTE',     // Lista clientes
    title: 'Clientes',
  },
  {
    key: 'gestion.clientes.nuevo',
    path: '/personas/cliente/new',      // Crear cliente
    title: 'Nuevo Cliente',
  },
  {
    key: 'gestion.proveedores',
    path: '/personas?tipo=PROVEEDOR',   // Lista proveedores
    title: 'Proveedores',
  },
  {
    key: 'gestion.proveedores.nuevo',
    path: '/personas/proveedor/new',    // Crear proveedor
    title: 'Nuevo Proveedor',
  },
  {
    key: 'gestion.usuarios.interno',
    path: '/personas/interno/new',      // Crear usuario interno
    title: 'Nuevo Usuario Interno',
    authority: ['ADMIN'],               // Solo para administradores
  },
]
```

**VALIDACIONES ZOD ESPEC√çFICAS:**

```typescript
// views/personas/schemas.ts

// ‚úÖ CLIENTE: Solo datos b√°sicos
export const clienteSchema = z.object({
  nombre: z.string().min(2),
  email: z.string().email(),
  telefono: z.string().optional(),
  cvu: z.string().optional(),
  tipo: z.literal(TipoPersona.CLIENTE),
  esUsuario: z.literal(false),          // Forzado a false
  roles: z.array(z.nativeEnum(RolUsuario)).default([]), // Sin roles
  activo: z.boolean().default(true),
});

// ‚úÖ PROVEEDOR: Datos b√°sicos + contrase√±a + rol fijo
export const proveedorSchema = z.object({
  // ...campos b√°sicos...
  password: z.string().min(6),          // Contrase√±a requerida
  tipo: z.literal(TipoPersona.PROVEEDOR),
  esUsuario: z.literal(true),           // Forzado a true
  roles: z.array(z.literal(RolUsuario.PROVEEDOR)).default([RolUsuario.PROVEEDOR]), // Rol fijo
});

// ‚úÖ INTERNO: Datos b√°sicos + contrase√±a + roles administrativos
export const internoSchema = z.object({
  // ...campos b√°sicos...
  password: z.string().min(6),          // Contrase√±a requerida
  roles: z.array(z.enum([RolUsuario.ADMIN, RolUsuario.CONTADOR]))
    .min(1, 'Debe seleccionar al menos un rol administrativo'), // Roles seleccionables
  tipo: z.literal(TipoPersona.INTERNO),
  esUsuario: z.literal(true),           // Forzado a true
});
```

**UX MEJORADA:**

1. **Selector de Tipo Elegante**: P√°gina con cards interactivas que explican cada tipo
2. **Formularios Contextuales**: Campos espec√≠ficos seg√∫n el tipo de persona
3. **Validaci√≥n en Tiempo Real**: Zod + React Hook Form en todos los formularios
4. **Animaciones Suaves**: Framer Motion en todas las transiciones
5. **Feedback Visual**: Notificaciones de √©xito/error claramente diferenciadas
6. **Navegaci√≥n Intuitiva**: Breadcrumbs y botones de retorno en todas las p√°ginas

**ARQUITECTURA H√çBRIDA MANTENIDA:**

```
frontend/src/
‚îú‚îÄ‚îÄ modules/                           # L√ìGICA DE NEGOCIO
‚îÇ   ‚îî‚îÄ‚îÄ persona/
‚îÇ       ‚îú‚îÄ‚îÄ types.ts                   # Tipos de dominio
‚îÇ       ‚îú‚îÄ‚îÄ service.ts                 # Llamadas a API
‚îÇ       ‚îî‚îÄ‚îÄ hooks/usePersona.ts        # Hook principal
‚îú‚îÄ‚îÄ views/                             # L√ìGICA DE UI
‚îÇ   ‚îî‚îÄ‚îÄ personas/
‚îÇ       ‚îú‚îÄ‚îÄ schemas.ts                 # Validaci√≥n espec√≠fica por tipo
‚îÇ       ‚îú‚îÄ‚îÄ types.ts                   # Re-exports + tipos UI
‚îÇ       ‚îú‚îÄ‚îÄ [TipoForm]/               # Formularios espec√≠ficos
‚îÇ       ‚îú‚îÄ‚îÄ [TipoNew]/                # P√°ginas de creaci√≥n espec√≠ficas
‚îÇ       ‚îî‚îÄ‚îÄ PersonaTypeSelector/       # Selector de tipo
```

**TECNOLOG√çAS INTEGRADAS Y FUNCIONANDO:**
- ‚úÖ **Framer Motion**: Animaciones en todas las vistas
- ‚úÖ **React Hook Form**: Gesti√≥n de formularios espec√≠ficos
- ‚úÖ **Zod**: Validaci√≥n diferenciada por tipo
- ‚úÖ **DataTable**: Listado con filtros por tipo
- ‚úÖ **Componentes UI**: Badge, Tag, Tooltip, Button, Dialog integrados

**COMANDOS PARA PROBAR LA FUNCIONALIDAD:**

```bash
# 1. Iniciar el entorno
docker-compose up -d

# 2. Acceder a la aplicaci√≥n
# http://localhost:3000
# Login: admin@misionary.com / admin123

# 3. Navegar a:
# - Gesti√≥n Comercial > Nuevo Cliente    (/personas/cliente/new)
# - Gesti√≥n Comercial > Nuevo Proveedor  (/personas/proveedor/new)
# - Gesti√≥n Comercial > Nuevo Usuario Interno (/personas/interno/new)
# - O usar el selector: /personas/new

# 4. Verificar en backend que se crean correctamente:
docker exec misionary-backend-1 npm run db:studio
```

**PR√ìXIMOS PASOS RECOMENDADOS:**

1. **‚úÖ COMPLETADO**: Formularios espec√≠ficos por tipo de persona
2. **‚úÖ COMPLETADO**: Navegaci√≥n mejorada con opciones espec√≠ficas
3. **‚úÖ COMPLETADO**: Validaciones diferenciadas por tipo
4. **üîÑ SIGUIENTE**: Filtros en PersonaList por tipo de persona
5. **üîÑ SIGUIENTE**: P√°ginas de edici√≥n espec√≠ficas por tipo
6. **üîÑ SIGUIENTE**: CRUD Productos (usar estructura de personas como template)

#### **‚úÖ FASE COMPLETADA: CRUD PERSONAS - EJEMPLO DE IMPLEMENTACI√ìN EXITOSA**

**üéâ ESTADO: 100% FUNCIONAL - CREAR, LISTAR, EDITAR, ELIMINAR**

**ARQUITECTURA H√çBRIDA IMPLEMENTADA:**
Hemos establecido una arquitectura que separa claramente la l√≥gica de negocio de la l√≥gica de UI:

```
frontend/src/
‚îú‚îÄ‚îÄ modules/                           # L√ìGICA DE NEGOCIO
‚îÇ   ‚îî‚îÄ‚îÄ persona/
‚îÇ       ‚îú‚îÄ‚îÄ types.ts                   # Tipos de dominio (Persona, DTOs)
‚îÇ       ‚îú‚îÄ‚îÄ service.ts                 # Llamadas a API (usando ApiService.fetchData)
‚îÇ       ‚îî‚îÄ‚îÄ hooks/
‚îÇ           ‚îî‚îÄ‚îÄ usePersona.ts          # Hook principal con l√≥gica de negocio
‚îú‚îÄ‚îÄ views/                             # L√ìGICA DE UI
‚îÇ   ‚îî‚îÄ‚îÄ personas/
‚îÇ       ‚îú‚îÄ‚îÄ types.ts                   # Re-exports desde modules/
‚îÇ       ‚îú‚îÄ‚îÄ schemas.ts                 # Validaci√≥n Zod + enums locales
‚îÇ       ‚îú‚îÄ‚îÄ hooks/
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ index.ts               # Hooks espec√≠ficos de UI (filtros, etc.)
‚îÇ       ‚îú‚îÄ‚îÄ PersonaList/
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ index.tsx              # Export limpio
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ PersonaList.tsx        # Componente principal con DataTable
‚îÇ       ‚îú‚îÄ‚îÄ PersonaForm/
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ index.tsx              # Export limpio
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ PersonaForm.tsx        # Formulario base reutilizable
‚îÇ       ‚îú‚îÄ‚îÄ PersonaNew/
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ index.tsx              # Export limpio
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ PersonaNew.tsx         # P√°gina de alta con React Hook Form + Zod
‚îÇ       ‚îú‚îÄ‚îÄ PersonaEdit/
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ index.tsx              # Export limpio
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ PersonaEdit.tsx        # P√°gina de edici√≥n con React Hook Form + Zod
‚îÇ       ‚îî‚îÄ‚îÄ index.tsx                  # Vista principal que orquesta todo
```

**TECNOLOG√çAS INTEGRADAS Y FUNCIONANDO:**
- ‚úÖ **Framer Motion**: Animaciones y microinteracciones en todas las vistas
- ‚úÖ **React Hook Form**: Gesti√≥n de formularios en PersonaNew y PersonaEdit
- ‚úÖ **Zod**: Validaci√≥n de esquemas con enums locales
- ‚úÖ **DataTable**: Listado con filtros, paginaci√≥n, ordenamiento
- ‚úÖ **Componentes UI**: Badge, Tag, Tooltip, Button, Dialog, Alert integrados

**FUNCIONALIDADES 100% OPERATIVAS:**
1. **‚úÖ CREAR**: `/personas/new` - Formulario completo con validaci√≥n
2. **‚úÖ LISTAR**: `/personas` - DataTable con columnas ID, Nombre, Email, Tipo, Roles, Acciones
3. **‚úÖ EDITAR**: `/personas/edit/:id` - Formulario pre-poblado con validaci√≥n
4. **‚úÖ ELIMINAR**: Confirmaci√≥n con ConfirmDialog antes de eliminar
5. **‚úÖ NAVEGACI√ìN**: Integraci√≥n completa con sidebar del template
6. **‚úÖ ROLES M√öLTIPLES**: Visualizaci√≥n correcta con Tags de colores √∫nicos
7. **‚úÖ VALIDACI√ìN**: Esquemas Zod funcionando en tiempo real
8. **‚úÖ ANIMACIONES**: Microinteracciones suaves con Framer Motion

**PROBLEMAS RESUELTOS EXITOSAMENTE:**
1. **‚ùå‚Üí‚úÖ @prisma/client**: Eliminado del frontend, creados enums locales
2. **‚ùå‚Üí‚úÖ Loop infinito**: Corregidas dependencias de useEffect
3. **‚ùå‚Üí‚úÖ Keys duplicadas**: Agregados √≠ndices √∫nicos en mapeo de roles
4. **‚ùå‚Üí‚úÖ Formularios**: React Hook Form + Zod implementado correctamente
5. **‚ùå‚Üí‚úÖ Navegaci√≥n**: Rutas de edici√≥n funcionando perfectamente
6. **‚ùå‚Üí‚úÖ Actualizaci√≥n**: Backend y frontend sincronizados

#### **üéØ SIGUIENTE FASE: CRUD PRODUCTOS (USAR PERSONAS COMO PLANTILLA PERFECTA)**

**PASO A PASO PARA REPLICAR EL √âXITO:**

**1. CREAR ESTRUCTURA DE ARCHIVOS (OBLIGATORIA):**
```bash
mkdir -p frontend/src/views/productos/{ProductoList,ProductoForm,ProductoNew,ProductoEdit,hooks}
```

```
views/productos/
‚îú‚îÄ‚îÄ schemas.ts                    # CR√çTICO: Enums locales + validaci√≥n Zod
‚îú‚îÄ‚îÄ types.ts                      # Re-exports desde modules/
‚îú‚îÄ‚îÄ hooks/index.ts                # Hooks UI espec√≠ficos
‚îú‚îÄ‚îÄ ProductoList/
‚îÇ   ‚îú‚îÄ‚îÄ index.tsx                # export { default } from './ProductoList';
‚îÇ   ‚îî‚îÄ‚îÄ ProductoList.tsx         # DataTable + columnas + acciones
‚îú‚îÄ‚îÄ ProductoForm/
‚îÇ   ‚îú‚îÄ‚îÄ index.tsx                # export { default } from './ProductoForm';
‚îÇ   ‚îî‚îÄ‚îÄ ProductoForm.tsx         # Formulario base reutilizable
‚îú‚îÄ‚îÄ ProductoNew/
‚îÇ   ‚îú‚îÄ‚îÄ index.tsx                # export { default } from './ProductoNew';
‚îÇ   ‚îî‚îÄ‚îÄ ProductoNew.tsx          # React Hook Form + Zod + animaciones
‚îú‚îÄ‚îÄ ProductoEdit/
‚îÇ   ‚îú‚îÄ‚îÄ index.tsx                # export { default } from './ProductoEdit';
‚îÇ   ‚îî‚îÄ‚îÄ ProductoEdit.tsx         # React Hook Form + Zod + animaciones
‚îî‚îÄ‚îÄ index.tsx                    # Vista principal orquestadora
```

**2. CONFIGURAR VALIDACI√ìN ZOD (COPIAR DE PERSONAS):**
```typescript
// views/productos/schemas.ts
import { z } from 'zod';

// CR√çTICO: Enums locales (NO @prisma/client)
export enum TipoProducto {
  PRODUCTO = 'PRODUCTO',
  SERVICIO = 'SERVICIO'
}

export enum EstadoProducto {
  ACTIVO = 'ACTIVO',
  INACTIVO = 'INACTIVO'
}

export const productoSchema = z.object({
  nombre: z.string().min(2, 'M√≠nimo 2 caracteres'),
  descripcion: z.string().optional(),
  precio: z.number().positive('Debe ser positivo'),
  tipo: z.nativeEnum(TipoProducto),
  estado: z.nativeEnum(EstadoProducto)
});

export const createProductoSchema = productoSchema;
export const updateProductoSchema = productoSchema.partial();

export type CreateProductoFormData = z.infer<typeof createProductoSchema>;
export type UpdateProductoFormData = z.infer<typeof updateProductoSchema>;
```

**3. ACTUALIZAR L√ìGICA DE NEGOCIO:**
```typescript
// modules/producto/service.ts - USAR PATR√ìN FETCHDATA
export async function fetchProductos(): Promise<Producto[]> {
  const response = await ApiService.fetchData<Producto[]>({ 
    url: '/productos', 
    method: 'GET' 
  });
  return response.data;
}

export async function createProducto(data: CreateProductoDTO): Promise<Producto> {
  const response = await ApiService.fetchData<Producto>({ 
    url: '/productos', 
    method: 'POST', 
    data 
  });
  return response.data;
}
// ... m√°s m√©todos igual que personas
```

**4. CONFIGURAR NAVEGACI√ìN (COPIAR PATR√ìN PERSONAS):**
```typescript
// configs/routes.config.tsx
const ProductoView = lazy(() => import('@/views/productos'));
const ProductoNew = lazy(() => import('@/views/productos/ProductoNew'));
const ProductoEdit = lazy(() => import('@/views/productos/ProductoEdit'));

// Agregar rutas:
{ key: 'productos', path: '/productos', component: ProductoView },
{ key: 'producto-new', path: '/productos/new', component: ProductoNew },
{ key: 'producto-edit', path: '/productos/edit/:id', component: ProductoEdit },
```

**5. CREAR COMPONENTES (COPIAR ESTRUCTURA DE PERSONAS):**
- **ProductoList.tsx**: DataTable con columnas espec√≠ficas
- **ProductoNew.tsx**: React Hook Form + Zod + Framer Motion
- **ProductoEdit.tsx**: Igual que PersonaEdit pero para productos
- **hooks/useProducto.ts**: Hook principal con CRUD operations

**PUNTOS CR√çTICOS PARA NO FALLAR:**
1. **‚ùå NUNCA** importar de `@prisma/client` en frontend
2. **‚úÖ SIEMPRE** crear enums locales en `schemas.ts`
3. **‚úÖ USAR** `ApiService.fetchData({ url, method, data })`
4. **‚úÖ MANTENER** estructura modules/ + views/
5. **‚úÖ AGREGAR** rutas en routes.config.tsx
6. **‚úÖ CONFIGURAR** navegaci√≥n en navigation.config/
7. **‚úÖ AGREGAR** traducciones en locales/lang/es.json

#### **üîß COMANDOS DESARROLLO:**
```bash
# Instalar nuevas dependencias
./manage.sh frontend npm install

# Iniciar desarrollo frontend
./manage.sh frontend npm run dev

# Ver errores en tiempo real
docker-compose logs -f frontend
```

### üîß **COMANDOS √öTILES**
```bash
# Iniciar entorno completo
docker-compose up -d

# Ver logs
docker-compose logs -f frontend
docker-compose logs -f backend

# Reiniciar servicios
docker-compose restart frontend
docker-compose restart backend

# Acceder a base de datos
docker exec -it misionary-postgres-1 psql -U postgres -d misionary
```

### üìã **VERIFICACIONES DIARIAS**
- [ ] Contenedores corriendo: `docker ps`
- [ ] Backend responde: `curl http://localhost:3001/api/health`
- [ ] Frontend carga: `http://localhost:3000`
- [ ] Login funciona: admin@misionary.com / admin123
- [ ] Layout principal visible post-login

---

## üìä **AN√ÅLISIS DEL SCHEMA Y NUEVO ORDEN DE IMPLEMENTACI√ìN MULTI-MONEDA**

### **üîç AN√ÅLISIS DEL SCHEMA ACTUAL:**

**MODELOS EXISTENTES:**
- ‚úÖ `Persona` (Cliente/Proveedor/Interno) - COMPLETO
- ‚úÖ `Producto` (con precio y proveedor) - B√ÅSICO
- ‚úÖ `Servicio` (con precio y proveedor) - B√ÅSICO  
- ‚úÖ `Presupuesto` (con estados y items) - FUNCIONAL
- ‚úÖ `Item` (productos/servicios en presupuestos) - FUNCIONAL
- ‚úÖ `Factura` (vinculada a presupuestos) - B√ÅSICO
- ‚úÖ `Impuesto` (con porcentajes) - FUNCIONAL

**LIMITACIONES CR√çTICAS PARA AGENCIA EN ARGENTINA:**
- ‚ùå **NO hay gesti√≥n multi-moneda** (ARS/USD/EUR)
- ‚ùå **NO hay tipos de cambio hist√≥ricos**
- ‚ùå **NO hay registro de costos operativos**
- ‚ùå **NO hay an√°lisis de rentabilidad real**
- ‚ùå **NO hay historial de precios** en Producto/Servicio
- ‚ùå **NO hay modelo Contrato** para recurrencia
- ‚ùå **NO hay servicios compuestos** (paquetes)
- ‚ùå **NO hay seguimiento de pagos detallado**

### **üéØ NUEVO ORDEN DE IMPLEMENTACI√ìN (ENFOQUE MULTI-MONEDA):**

**1Ô∏è‚É£ PRIORIDAD M√ÅXIMA: GESTI√ìN MULTI-MONEDA**
```sql
-- NUEVAS TABLAS FUNDAMENTALES:
- Moneda (id, codigo, nombre, simbolo, activo)
- TipoCambio (id, monedaDesde, monedaHacia, valor, fecha)
-- MODIFICAR TABLAS EXISTENTES:
- Producto: agregar monedaId
- Servicio: agregar monedaId
- Presupuesto: agregar monedaId, tipoCambioFecha
- Factura: agregar monedaId, tipoCambioFecha
```
**JUSTIFICACI√ìN**: Base fundamental para econom√≠a argentina - permite an√°lisis financiero real en contexto inflacionario/devaluatorio

**2Ô∏è‚É£ SEGUNDA PRIORIDAD: COSTOS OPERATIVOS Y RENTABILIDAD**
```sql
-- NUEVAS TABLAS:
- GastoOperativo (id, concepto, monto, monedaId, fecha, categoria)
- AsignacionGastoProyecto (id, gastoId, presupuestoId, porcentaje, montoAsignado)
```
**JUSTIFICACI√ìN**: Permite conocer rentabilidad real considerando todos los costos operativos por moneda

**3Ô∏è‚É£ TERCERA PRIORIDAD: PRECIOS DIN√ÅMICOS MULTI-MONEDA**
```sql
-- NUEVA TABLA:
- HistorialPrecio (id, productoId/servicioId, monedaId, precio, fechaDesde, fechaHasta, motivoCambio)
```
**JUSTIFICACI√ìN**: Una vez establecida la base multi-moneda, los precios din√°micos se vuelven realmente √∫tiles

**4Ô∏è‚É£ CUARTA PRIORIDAD: CONTRATOS RECURRENTES MULTI-MONEDA**
```sql
-- NUEVAS TABLAS:
- Contrato (id, clienteId, presupuestoId, monedaId, fechaInicio, fechaFin, montoRecurrente, clausulaAjuste)
- FacturaContrato (id, contratoId, facturaId, periodo)
```
**JUSTIFICACI√ìN**: Contratos en moneda espec√≠fica con cl√°usulas de ajuste por devaluaci√≥n/inflaci√≥n

**5Ô∏è‚É£ QUINTA PRIORIDAD: SERVICIOS COMPUESTOS CON COSTOS**
```sql
-- NUEVAS TABLAS:
- ServicioCompuesto (id, nombre, monedaId)
- ComponenteServicio (id, servicioCompuestoId, servicioId, cantidad, porcentajeMargen, proveedorId)
```
**JUSTIFICACI√ìN**: Paquetes con m√°rgenes calculados sobre costos reales en moneda espec√≠fica

**6Ô∏è‚É£ SEXTA PRIORIDAD: SEGUIMIENTO DE PAGOS MULTI-MONEDA**
```sql
-- NUEVA TABLA:
- Pago (id, facturaId, monedaId, monto, tipoCambio, montoBase, fechaPago, metodoPago)
```
**JUSTIFICACI√ìN**: Completar el ciclo financiero con conversiones autom√°ticas y seguimiento de diferencias de cambio

### **üìä PROPUESTA DE NUEVAS TABLAS PARA GESTI√ìN MULTI-MONEDA Y COSTOS:**

```sql
-- 1. GESTI√ìN MULTI-MONEDA
model Moneda {
  id         Int    @id @default(autoincrement())
  codigo     String @unique // ARS, USD, EUR
  nombre     String // Peso Argentino, D√≥lar, Euro
  simbolo    String // $, USD, ‚Ç¨
  activo     Boolean @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relaciones
  tiposCambio TipoCambio[]
  presupuestos Presupuesto[]
  facturas    Factura[]
  productos   Producto[]
  servicios   Servicio[]
  gastosOperativos GastoOperativo[]
  pagos       Pago[]
}

model TipoCambio {
  id         Int    @id @default(autoincrement())
  monedaDesde String // USD
  monedaHacia String // ARS
  valor      Decimal @db.Decimal(15,4) // 1200.5000
  fecha      DateTime
  createdAt  DateTime @default(now())
  
  @@unique([monedaDesde, monedaHacia, fecha])
}

-- 2. COSTOS OPERATIVOS
model GastoOperativo {
  id           Int    @id @default(autoincrement())
  concepto     String
  descripcion  String?
  monto        Decimal @db.Decimal(15,2)
  monedaId     Int
  fecha        DateTime
  categoria    String // Oficina, Servicios, Personal, Marketing, etc.
  esRecurrente Boolean @default(false)
  frecuencia   String? // Mensual, Anual, etc.
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relaciones
  moneda       Moneda @relation(fields: [monedaId], references: [id])
  asignacionesProyecto AsignacionGastoProyecto[]
}

model AsignacionGastoProyecto {
  id              Int    @id @default(autoincrement())
  gastoId         Int
  presupuestoId   Int
  porcentaje      Decimal @db.Decimal(5,2) // 25.50%
  montoAsignado   Decimal @db.Decimal(15,2)
  createdAt       DateTime @default(now())

  // Relaciones
  gasto           GastoOperativo @relation(fields: [gastoId], references: [id])
  presupuesto     Presupuesto @relation(fields: [presupuestoId], references: [id])

  @@unique([gastoId, presupuestoId])
}

-- 3. HISTORIAL DE PRECIOS MULTI-MONEDA
model HistorialPrecio {
  id          Int    @id @default(autoincrement())
  productoId  Int?
  servicioId  Int?
  monedaId    Int
  precio      Decimal @db.Decimal(15,2)
  fechaDesde  DateTime
  fechaHasta  DateTime?
  motivoCambio String? // Inflaci√≥n, Devaluaci√≥n, Promoci√≥n
  activo      Boolean @default(true)
  createdAt   DateTime @default(now())

  // Relaciones
  producto    Producto? @relation(fields: [productoId], references: [id])
  servicio    Servicio? @relation(fields: [servicioId], references: [id])
  moneda      Moneda @relation(fields: [monedaId], references: [id])
}

-- 4. CONTRATOS RECURRENTES
model Contrato {
  id              Int    @id @default(autoincrement())
  clienteId       Int
  presupuestoId   Int // Presupuesto base
  monedaId        Int
  fechaInicio     DateTime
  fechaFin        DateTime
  frecuencia      String // Mensual, Trimestral, Anual
  montoRecurrente Decimal @db.Decimal(15,2)
  clausulaAjuste  String? // Ejemplo: "Ajuste por IPC + 5%"
  estado          String @default("ACTIVO") // ACTIVO, PAUSADO, FINALIZADO
  renovacionAuto  Boolean @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relaciones
  cliente         Persona @relation("ContratoCliente", fields: [clienteId], references: [id])
  presupuesto     Presupuesto @relation(fields: [presupuestoId], references: [id])
  moneda          Moneda @relation(fields: [monedaId], references: [id])
  facturasGeneradas FacturaContrato[]
}

model FacturaContrato {
  id          Int    @id @default(autoincrement())
  contratoId  Int
  facturaId   Int
  periodo     String // "2024-01", "2024-Q1"
  generadaEn  DateTime @default(now())

  // Relaciones
  contrato    Contrato @relation(fields: [contratoId], references: [id])
  factura     Factura @relation(fields: [facturaId], references: [id])

  @@unique([contratoId, periodo])
}

-- 5. SERVICIOS COMPUESTOS
model ServicioCompuesto {
  id          Int    @id @default(autoincrement())
  nombre      String
  descripcion String?
  monedaId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  moneda      Moneda @relation(fields: [monedaId], references: [id])
  componentes ComponenteServicio[]
}

model ComponenteServicio {
  id                  Int    @id @default(autoincrement())
  servicioCompuestoId Int
  servicioId          Int
  cantidad            Int @default(1)
  porcentajeMargen    Decimal @db.Decimal(5,2) // 20.00%
  proveedorId         Int?
  orden               Int @default(0)

  // Relaciones
  servicioCompuesto   ServicioCompuesto @relation(fields: [servicioCompuestoId], references: [id])
  servicio            Servicio @relation(fields: [servicioId], references: [id])
  proveedor           Persona? @relation("ComponenteProveedor", fields: [proveedorId], references: [id])
}

-- 6. PAGOS MULTI-MONEDA
model Pago {
  id          Int    @id @default(autoincrement())
  facturaId   Int
  monedaId    Int
  monto       Decimal @db.Decimal(15,2)
  tipoCambio  Decimal? @db.Decimal(15,4) // Tipo de cambio al momento del pago
  montoBase   Decimal? @db.Decimal(15,2) // Monto convertido a moneda base
  fechaPago   DateTime
  metodoPago  String // Efectivo, Transferencia, Cheque, etc.
  referencia  String? // N√∫mero de transferencia, cheque, etc.
  observaciones String?
  createdAt   DateTime @default(now())

  // Relaciones
  factura     Factura @relation(fields: [facturaId], references: [id])
  moneda      Moneda @relation(fields: [monedaId], references: [id])
}
```

**üîß MODIFICACIONES A TABLAS EXISTENTES:**

```sql
-- Agregar monedaId a tablas existentes
model Producto {
  // ...campos existentes...
  monedaId    Int @default(1) // 1 = ARS por defecto
  
  // ...relaciones existentes...
  moneda      Moneda @relation(fields: [monedaId], references: [id])
  historialPrecios HistorialPrecio[]
}

model Servicio {
  // ...campos existentes...
  monedaId    Int @default(1) // 1 = ARS por defecto
  
  // ...relaciones existentes...
  moneda      Moneda @relation(fields: [monedaId], references: [id])
  historialPrecios HistorialPrecio[]
  componentes ComponenteServicio[]
}

model Presupuesto {
  // ...campos existentes...
  monedaId    Int @default(1)
  tipoCambioFecha DateTime? // Para recordar el tipo de cambio usado
  
  // ...relaciones existentes...
  moneda      Moneda @relation(fields: [monedaId], references: [id])
  contratos   Contrato[]
  asignacionesGasto AsignacionGastoProyecto[]
}

model Factura {
  // ...campos existentes...
  monedaId    Int @default(1)
  tipoCambioFecha DateTime?
  
  // ...relaciones existentes...
  moneda      Moneda @relation(fields: [monedaId], references: [id])
  pagos       Pago[]
  facturasContrato FacturaContrato[]
}

model Persona {
  // ...campos existentes...
  
  // ...relaciones existentes...
  contratos   Contrato[] @relation("ContratoCliente")
  componentesComoProveedor ComponenteServicio[] @relation("ComponenteProveedor")
}
```

### **üöÄ RECOMENDACI√ìN FINAL ACTUALIZADA:**

**EMPEZAR POR GESTI√ìN MULTI-MONEDA** porque:
1. Es la base fundamental para an√°lisis financiero real en Argentina
2. Permite manejar la volatilidad del peso argentino
3. Una vez implementado, todas las dem√°s funcionalidades se benefician autom√°ticamente
4. Resuelve el problema m√°s cr√≠tico de la agencia: cotizar en USD y cobrar en pesos

¬øProcedemos con la implementaci√≥n de Gesti√≥n Multi-Moneda como nueva base del sistema?

---

## **üìã PR√ìXIMOS PASOS CONCRETOS PARA IMPLEMENTACI√ìN MULTI-MONEDA:**

**FASE 1: PREPARACI√ìN DEL SCHEMA (1-2 d√≠as)**
1. Crear migraci√≥n para tabla `Moneda` con datos iniciales (ARS, USD, EUR)
2. Crear migraci√≥n para tabla `TipoCambio` 
3. Agregar campo `monedaId` a tablas existentes (Producto, Servicio, Presupuesto, Factura)
4. Ejecutar migraciones y seed con datos de prueba

**FASE 2: BACKEND API MULTI-MONEDA (2-3 d√≠as)**
1. Crear servicio de tipos de cambio (moneda.service.ts)
2. Crear controlador de monedas (moneda.controller.ts)
3. Crear rutas de API para gesti√≥n de monedas y tipos de cambio
4. Actualizar controladores existentes para soportar multi-moneda
5. Crear middleware de conversi√≥n autom√°tica

**FASE 3: FRONTEND MULTI-MONEDA (3-4 d√≠as)**
1. Crear componente selector de moneda
2. Crear hooks para conversi√≥n de monedas
3. Actualizar formularios de productos/servicios para incluir moneda
4. Actualizar formularios de presupuestos con selector de moneda
5. Crear pantalla de gesti√≥n de tipos de cambio
6. Actualizar todos los displays de precios para mostrar moneda

**FASE 4: COSTOS OPERATIVOS (2-3 d√≠as)**
1. Crear tabla `GastoOperativo` y `AsignacionGastoProyecto`
2. Crear controladores y servicios para gastos operativos
3. Crear pantallas de registro de gastos
4. Crear pantalla de asignaci√≥n de gastos a proyectos
5. Crear reportes de rentabilidad por proyecto

**FASE 5: TESTING Y REFINAMIENTO (1-2 d√≠as)**
1. Testing de conversiones autom√°ticas
2. Testing de formularios multi-moneda
3. Testing de reportes consolidados
4. Ajustes de UX y performance

**TOTAL ESTIMADO: 9-14 d√≠as de desarrollo**

### **üîß COMANDOS DE DESARROLLO PARA MULTI-MONEDA:**

```bash
# Crear nueva migraci√≥n para multi-moneda
cd backend
npx prisma migrate dev --name "add_multimoneda_support"

# Actualizar types despu√©s de cambios en schema
npx prisma generate

# Seed con datos de monedas iniciales
npm run db:seed

# Testing de endpoints multi-moneda
curl -X GET http://localhost:3001/api/monedas
curl -X GET http://localhost:3001/api/tipos-cambio/USD/ARS
```

### **üìä M√âTRICAS DE √âXITO PARA MULTI-MONEDA:**

**T√âCNICAS:**
- [ ] Todos los precios se almacenan con su moneda espec√≠fica
- [ ] Conversiones autom√°ticas funcionan correctamente
- [ ] Reportes consolidados muestran totales en moneda base
- [ ] Performance no se degrada con las conversiones

**COMERCIALES:**
- [ ] Presupuestos se pueden cotizar en USD y facturar en ARS
- [ ] Seguimiento de diferencias de cambio por proyecto
- [ ] An√°lisis de rentabilidad considerando fluctuaciones monetarias
- [ ] Alertas de precios desactualizados por devaluaci√≥n

**UX:**
- [ ] Selector de moneda intuitivo en todos los formularios
- [ ] Displays de precios claros con s√≠mbolo de moneda
- [ ] Conversiones en tiempo real visibles al usuario
- [ ] Configuraci√≥n simple de tipos de cambio diarios

¬øComenzamos con la Fase 1: Preparaci√≥n del Schema para Multi-Moneda?

---

**üéØ ESTADO ACTUAL DEL PROYECTO:**
- ‚úÖ Gesti√≥n de personas (clientes/proveedores/internos) COMPLETADA
- ‚úÖ Arquitectura de formularios espec√≠ficos IMPLEMENTADA  
- ‚úÖ Documentaci√≥n actualizada con nuevo enfoque COMPLETADA
- üîÑ **SIGUIENTE**: Implementaci√≥n sistema multi-moneda (Fase 1)

El sistema est√° listo para dar el salto hacia una gesti√≥n financiera real adaptada al contexto argentino.
